@page "/ViewBlog/{blogIdinput}"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@inject IAuthenticationService AuthService
@inject IBlogService BlogService
@inject IBlogEntryService BlogEntryService


@if (!loading)
{
	<h1>@Model.Blog.BlogTitle</h1>
	<br/>
	<p>@Model.Blog.Description</p>
	<br/>

	<p>
		<a href="/">Back</a>
	</p>

	@if (Model.Blog.Locked)
	{
		<h2 style="color:red">Bloggen er låst for kommentarer og innlegg.</h2>
	}

	@if (Model.Blog.Owner.UserName == loggedInUserName)
	{
		<div class="card">
			@if (Model.Blog.Locked)
			{
				<p>Din Blogg er låst. Ønsker du å åpne for innlegg og kommentarer?</p>
			}
			@if (!Model.Blog.Locked)
			{
				<p>Bloggen er åpen for innlegg og kommentarer. Ønsker du å låse den?</p>
			}
			<div class="card-body">
				<a href="" onclick="@(()=>ToggleBlogLock())" @onclick:preventDefault>Lås/Avlås</a>
			</div>
		</div>

		@if (!Model.Blog.Locked)
		{
			<br />
			@if (!creatingNewEntry)
			{
				<p>
					<a href="" onclick="@(()=>CreateBlogEntry())" @onclick:preventDefault>Ny Blog Post</a>
				</p>
			}
			@if (creatingNewEntry)
			{

				<EditForm Model="@newEntry" OnValidSubmit="OnValidSubmitNewEntry">
					<DataAnnotationsValidator />
					<div class="form-group">
						<label>(Påkrevd)</label>
						<label>Ny Post Tittel</label>
						<InputText @bind-Value="newEntry.EntryTitle" class="form-control" />
						<ValidationMessage For="@(() => newEntry.EntryTitle)" />
					</div>
					<br />
					<div class="form-group">
						<label>(Påkrevd)</label>
						<label>Ny Post innhold</label>
						<InputTextArea @bind-Value="newEntry.EntryBody" class="form-control" />
						<ValidationMessage For="@(() => newEntry.EntryBody)" />
					</div>
					<br />
					<div class="form-group">
						<label>(Valgfritt)</label>
						<label>Tags, Begynn hver tag med #, separer med mellomrom (f.eks "#mat #verktøy")</label>
						<InputText @bind-Value="newEntry.TagsString" class="form-control" />
						<ValidationMessage For="@(() => newEntry.TagsString)" />
					</div>
					<button disabled="@loading" class="btn btn-primary">
						Post!
					</button>
					<a href="" onclick="@(()=>ResetNewBlogEntry())" class="btn btn-link" @onclick:preventDefault>Avbryt</a>
				</EditForm>
				<br />
			}
		}
	}

	@if (!string.IsNullOrEmpty(error))
	{
		<h2 style="color:red">ERROR: @error</h2>
	}
	<table class="table">
		<thead>
			<tr>
				<th>
					<p>EntryTitle</p>
				</th>
				<th>
					<p>EntryBody</p>
				</th>
				<th></th>
			</tr>
		</thead>
		<tbody>
			@foreach (BlogEntry e in Model.BlogEntries)
			{
				<tr>
					<td>
						@e.EntryTitle
						<br/>
						<br />
						@foreach (Tag t in e.Tags)
						{
							<br />
							@t.TagName
						}
					</td>
					<td>
						@e.EntryBody
					</td>
					<td>
						@if (!Model.Blog.Locked)
						{
							@if (!(loggedInUserName == ""))
							{
								@if (Model.Blog.Owner.UserName == loggedInUserName)
								{
									@if(editingEntryId != e.BlogEntryId)
									{
										<a href="" onclick="@(()=>EditBlogEntry(e))" @onclick:preventDefault>Rediger Post</a>
									}
									@if(editingEntryId == e.BlogEntryId)
									{
										<EditForm Model="@editingEntry" OnValidSubmit="OnValidSubmitEditEntry">
											<DataAnnotationsValidator />
											<div class="form-group">
												<label>Rediger Post Tittel</label>
												<InputText @bind-Value="editingEntry.EntryTitle" class="form-control" />
												<ValidationMessage For="@(() => editingEntry.EntryTitle)" />
											</div>
											<div class="form-group">
												<label>Rediger Post Innhold</label>
												<InputTextArea @bind-Value="editingEntry.EntryBody" class="form-control" />
												<ValidationMessage For="@(() => editingEntry.EntryBody)" />
											</div>
											<div class="form-group">
												<label>Tags, Begynn hver tag med #, separer med mellomrom (f.eks "#mat #verktøy")</label>
												<InputText @bind-Value="editingEntry.TagsString" class="form-control" />
												<ValidationMessage For="@(() => newEntry.TagsString)" />
											</div>
											<input type="hidden" @bind-value="editingEntry.BlogEntryId">
											<button disabled="@loading" class="btn btn-primary">
												Post!
											</button>
											<a href="" onclick="@(()=>ResetEditBlogEntry())" class="btn btn-link"@onclick:preventDefault>Avbryt</a>
										</EditForm>
									}


									<br />
									<a href="" onclick="@(()=>DeleteBlogEntry(e.BlogEntryId))">Slett Post</a>
								}

								<br />
								<br />
								@if (newCommentEntryId != e.BlogEntryId)
								{
									<a href="" onclick="@(()=>CreateComment(e.BlogEntryId))" @onclick:preventDefault>Legg til kommentar</a>
								}
								@if (newCommentEntryId == e.BlogEntryId)
								{
									<EditForm Model="@newComment" OnValidSubmit="OnValidSubmitNewComment">
										<DataAnnotationsValidator />
										<div class="form-group">
											<label>Skriv Ny Kommentar:</label>
											<InputText @bind-Value="newComment.CommentBody" class="form-control" />
											<ValidationMessage For="@(() => newComment.CommentBody)" />
										</div>
										<button disabled="@loading" class="btn btn-primary">
											Post Kommentar!
										</button>
										<a href="" onclick="@(()=>ResetNewComment())" class="btn btn-link" @onclick:preventDefault>Avbryt</a>
									</EditForm>
								}
							}
						}
					</td>
				</tr>

				@foreach (Comment c in Model.Comments)
				{
					@if (c.EntryId == e.BlogEntryId)
					{
						<tr>
							<td>
								<div class="card" style="background-color:green">
									@c.Owner.UserName
									@if (c.Owner.UserName == loggedInUserName)
									{
										<p> (deg)</p>
									}
									<br />
									<br />
									<div class="card-body" style="background-color:darkgreen">
										@c.CommentBody
										@if (!Model.Blog.Locked)
										{
											@if (c.Owner.UserName == loggedInUserName)
											{
												<br />
												@if (editingCommentId != c.CommentId)
												{
													<a href="" onclick="@(()=>EditComment(c))" @onclick:preventDefault>Rediger Kommentar</a>
												}
												@if (editingCommentId == c.CommentId)
												{
													<EditForm Model="@editingComment" OnValidSubmit="OnValidSubmitEditComment">
														<DataAnnotationsValidator />
														<div class="form-group">
															<label>Redigér Kommentar:</label>
															<InputText @bind-Value="editingComment.CommentBody" class="form-control" />
															<ValidationMessage For="@(() => editingComment.CommentBody)" />
														</div>
														<button disabled="@loading" class="btn btn-primary">
															Lagre Endringer
														</button>
														<a href="" onclick="@(()=>ResetEditComment())" class="btn btn-link" @onclick:preventDefault>Avbryt</a>
													</EditForm>
												}

												<br />
												<a href="" onclick="@(()=>DeleteComment(c.CommentId))">Slett Kommentar</a>
											}
										}
									</div>
								</div>
							</td>
						</tr>
					}

				}
			}
		</tbody>
	</table>
}

@code {
	[Parameter]
	public string blogIdinput { get; set; }
	public int blogId { get; set; }

	BlogViewModel Model { get; set; }
	bool loading { get; set; } = true;
	string loggedInUserName { get; set; }
	private string error { get; set; } = "";

	public bool creatingNewEntry { get; set; } = false;
	public int newCommentEntryId { get; set; } = -1;

	BlogEntryDTO newEntry { get; set; } = new();
	CommentDTO newComment { get; set; } = new();

	public int editingEntryId { get; set; } = -1;
	public int editingCommentId { get; set; } = -1;

	BlogEntryDTO editingEntry { get; set; } = new();
	Comment editingComment { get; set; } = new();

	// SignalR
	private HubConnection? hubConnection;
	private bool messageInput = true;

	protected async override Task OnInitializedAsync()
	{
		blogId = Int32.Parse(blogIdinput);
		loggedInUserName = await AuthService.GetUserNameFromToken();
		Model = await BlogService.GetBlogEntries(blogId);

		hubConnection = new HubConnectionBuilder()
			.WithUrl(NavigationManager.ToAbsoluteUri("/bloghub"))
			.Build();

		hubConnection.On<bool>("ReceiveMessage", (message) =>
		{

			InvokeAsync(ReloadModel);

			InvokeAsync(StateHasChanged);
		});

		await hubConnection.StartAsync();

		loading = false;
	}

	//SignalR
	private async Task SignalRUpdate()
	{
		if (hubConnection is not null)
		{
			await hubConnection.SendAsync("SendMessage", messageInput);
		}
	}

	public bool IsConnected =>
		hubConnection?.State == HubConnectionState.Connected;

	public async ValueTask DisposeAsync()
	{
		if (hubConnection is not null)
		{
			await hubConnection.DisposeAsync();
		}
	}

	public async Task ReloadModel()
	{
		loading = true;
		Model = await BlogService.GetBlogEntries(blogId);
		loading = false;
	}


	// CRUD operations
	public void CreateBlogEntry()
	{
		newEntry = new();

		creatingNewEntry = true;
		StateHasChanged();
	}

	public void CreateComment(int entryId)
	{
		newComment = new();

		newCommentEntryId = entryId;
		StateHasChanged();
	}

	public void EditBlogEntry(BlogEntry entry)
	{
		editingEntry = new()
		{
			EntryTitle = entry.EntryTitle,
			EntryBody = entry.EntryBody
		};

		foreach(Tag t in entry.Tags)
		{
			editingEntry.TagsString = editingEntry.TagsString + (t.TagName) + " ";
		}

		editingEntryId = entry.BlogEntryId;
		StateHasChanged();
	}

	public void EditComment(Comment c)
	{
		editingComment = new()
			{
				EntryId = c.EntryId,
				CommentBody = c.CommentBody
			};

		editingCommentId = c.CommentId;
		StateHasChanged();
	}

	public void DeleteBlogEntry(int entryId)
	{
		NavigationManager.NavigateTo("/DeleteEntry/" + entryId.ToString());
	}

	public void DeleteComment(int commentId)
	{
		NavigationManager.NavigateTo("/DeleteComment/" + commentId.ToString());
	}

	public void ResetNewBlogEntry()
	{
		newEntry = new();
		creatingNewEntry = false;
		StateHasChanged();
	}

	public void ResetNewComment()
	{
		newComment = new();
		newCommentEntryId = -1;
		StateHasChanged();
	}

	public void ResetEditBlogEntry()
	{
		editingEntry = new();
		editingEntryId = -1;
		StateHasChanged();
	}

	public void ResetEditComment()
	{
		editingComment = new();
		editingCommentId = -1;
		StateHasChanged();
	}


	public async void ToggleBlogLock()
	{
		if (BlogService.ToggleBlogLock())
		{
			Model.Blog.Locked = !Model.Blog.Locked;
			await SignalRUpdate();
			StateHasChanged();
		}
	}

	public async void OnValidSubmitNewEntry()
	{
		error = "";
		newEntry.BlogId = blogId;

		int success = await BlogEntryService.CreateBlogEntry(newEntry);
		if (success < 0)
		{
			error = "Create Entry failed";
		}
		creatingNewEntry = false;

		await SignalRUpdate();
		await ReloadModel();
		StateHasChanged();
	}

	public async void OnValidSubmitNewComment()
	{
		error = "";
		newComment.EntryId = newCommentEntryId;

		int success = await BlogEntryService.CreateComment(newComment);
		if (success < 0)
		{
			error = "Create Comment failed";
		}
		newCommentEntryId = -1;

		await SignalRUpdate();
		await ReloadModel();
		StateHasChanged();
	}

	public async void OnValidSubmitEditEntry()
	{
		error = "";
		editingEntry.BlogId = blogId;
		editingEntry.BlogEntryId = editingEntryId;

		bool success = await BlogEntryService.UpdateEntry(editingEntry);
		if (!success)
		{
			error = "Edit Entry failed";
		}
		editingEntryId = -1;
		await SignalRUpdate();
		await ReloadModel();
		StateHasChanged();
	}

	public async void OnValidSubmitEditComment()
	{
		error = "";

		editingComment.CommentId = editingCommentId;

		bool success = await BlogEntryService.UpdateComment(editingComment);
		if (!success)
		{
			error = "Edit Comment failed";
		}
		editingCommentId = -1;

		await SignalRUpdate();
		await ReloadModel();
		StateHasChanged();
	}
}
